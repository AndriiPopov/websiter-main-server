{"version":3,"sources":["../../src/middleware/auth.js"],"names":["req","res","next","token","header","currentAction","status","send","jwt","verify","config","get","decoded","User","findById","user"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;+BAKgB,iBAAOA,GAAP,EAAqBC,GAArB,EAAqCC,IAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AACNC,YAAAA,KADM,GACEH,GAAG,CAACI,MAAJ,CAAW,cAAX,CADF;AAENC,YAAAA,aAFM,GAEUL,GAAG,CAACI,MAAJ,CAAW,gBAAX,CAFV;;AAAA,gBAGPD,KAHO;AAAA;AAAA;AAAA;;AAAA,6CAGOF,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,mCAArB,CAHP;;AAAA;AAAA;AAAA;AAAA,mBAKcC,yBAAIC,MAAJ,CAAWN,KAAX,EAAkBO,mBAAOC,GAAP,CAAW,eAAX,CAAlB,CALd;;AAAA;AAKFC,YAAAA,OALE;AAAA;AAAA,mBAMSC,WAAKC,QAAL,CAAcF,OAAd,CANT;;AAAA;AAMRZ,YAAAA,GAAG,CAACe,IANI;;AAAA,gBAOHf,GAAG,CAACe,IAPD;AAAA;AAAA;AAAA;;AAAA,6CAQGd,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,0BAArB,CARH;;AAAA;AAUJL,YAAAA,IAAI;;AAVA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaRD,YAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB;;AAbQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import jwt from 'jsonwebtoken'\nimport config from 'config'\nimport { User } from '../models/user'\nimport type { $Request, $Response, NextFunction, Middleware } from 'express'\nimport type { userReqType } from '../custom-flow-types'\ntype reqType = userReqType & $Request\n\nexport default (async (req: reqType, res: $Response, next: NextFunction) => {\n    const token = req.header('X-Auth-Token')\n    const currentAction = req.header('Current-Action')\n    if (!token) return res.status(401).send('Access denied. No token provided.')\n    try {\n        const decoded = await jwt.verify(token, config.get('jwtPrivateKey'))\n        req.user = await User.findById(decoded)\n        if (!req.user) {\n            return res.status(400).send('User does not not exist.')\n        } else {\n            next()\n        }\n    } catch (ex) {\n        res.status(400).send('Invalid token.')\n    }\n}: Middleware)\n"],"file":"auth.js"}