{"version":3,"sources":["../../src/routes/live.js"],"names":["router","express","Router","get","req","res","urlArray","originalUrl","split","length","status","send","domain","Website","findOne","pagesStructure","pagesObjects","Promise","all","map","item","Page","findById","id","pageObject","publishedVersion","fs","readFile","path","join","__dirname","err","data","splice","newData","replace","JSON","stringify"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAGA;;AACA;;AACA,IAAMA,MAAM,GAAGC,oBAAQC,MAAR,EAAf;;AAEAF,MAAM,CAACG,GAAP,CAAW,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAgB,kBAAOC,GAAP,EAAsBC,GAAtB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACRC,YAAAA,QADQ,GACGF,GAAG,CAACG,WAAJ,CAAgBC,KAAhB,CAAsB,GAAtB,CADH;;AAAA,kBAERF,QAAQ,CAACG,MAAT,GAAkB,CAFV;AAAA;AAAA;AAAA;;AAAA,8CAGDJ,GAAG,CACLK,MADE,CACK,GADL,EAEFC,IAFE,CAEG,+CAFH,CAHC;;AAAA;AAONC,YAAAA,MAPM,GAOGN,QAAQ,CAAC,CAAD,CAPX;AAAA;AAAA,mBAQqBO,iBAAQC,OAAR,CAC7B;AAAEF,cAAAA,MAAM,EAAEA;AAAV,aAD6B,EAE7B,gBAF6B,CARrB;;AAAA;AAAA;AAQJG,YAAAA,cARI,SAQJA,cARI;AAYNC,YAAAA,YAZM,GAYS,EAZT;AAAA;AAAA,mBAaNC,OAAO,CAACC,GAAR,CACFH,cAAc,CAACI,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA,2CAAmB,iBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACUC,WAAKC,QAAL,CAAcF,IAAI,CAACG,EAAnB,EAAuB,kBAAvB,CADV;;AAAA;AACTC,wBAAAA,UADS;AAEfR,wBAAAA,YAAY,CAACI,IAAI,CAACG,EAAN,CAAZ,GAAwBC,UAAU,CAACC,gBAAnC;;AAFe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAnB;;AAAA;AAAA;AAAA;AAAA,gBADE,CAbM;;AAAA;AAoBZC,2BAAGC,QAAH,CACIC,iBAAKC,IAAL,CAAUC,SAAS,GAAG,6BAAtB,CADJ,EAEI,MAFJ,EAGI,UAACC,GAAD,EAAMC,IAAN,EAAe;AACX,kBAAID,GAAJ,EAAS,MAAMA,GAAN;AACTzB,cAAAA,QAAQ,CAAC2B,MAAT,CAAgB,CAAhB,EAAmB,CAAnB;AACA,kBAAMC,OAAO,GAAGF,IAAI,CAACG,OAAL,CACZ,QADY,EAEZ,uDACIC,IAAI,CAACC,SAAL,CAAetB,cAAf,CADJ,GAEI,uCAFJ,GAGIqB,IAAI,CAACC,SAAL,CAAerB,YAAf,CAHJ,GAII,sCAJJ,GAKIoB,IAAI,CAACC,SAAL,CAAe/B,QAAQ,CAACuB,IAAT,CAAc,GAAd,CAAf,CALJ,GAMI,cARQ,CAAhB;AAWAxB,cAAAA,GAAG,CAACM,IAAJ,CAASuB,OAAT;AACH,aAlBL;;AApBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA;eA0CelC,M","sourcesContent":["import express from 'express'\nimport path from 'path'\nimport _ from 'lodash'\nimport fs from 'fs'\nimport type { $Request, $Response } from 'express'\n\nimport { Website } from '../models/website'\nimport { Page } from '../models/page'\nconst router = express.Router()\n\nrouter.get('*', async (req: $Request, res: $Response) => {\n    let urlArray = req.originalUrl.split('/')\n    if (urlArray.length < 2)\n        return res\n            .status(404)\n            .send('The website with the given URL was not found.')\n\n    const domain = urlArray[2]\n    const { pagesStructure } = await Website.findOne(\n        { domain: domain },\n        'pagesStructure'\n    )\n    const pagesObjects = {}\n    await Promise.all(\n        pagesStructure.map(async item => {\n            const pageObject = await Page.findById(item.id, 'publishedVersion')\n            pagesObjects[item.id] = pageObject.publishedVersion\n        })\n    )\n\n    fs.readFile(\n        path.join(__dirname + '/../client/build/index.html'),\n        'utf8',\n        (err, data) => {\n            if (err) throw err\n            urlArray.splice(0, 3)\n            const newData = data.replace(\n                '<head>',\n                \"<head><script>window.pagesStructure = JSON.parse('\" +\n                    JSON.stringify(pagesStructure) +\n                    \"');window.pagesObjects = JSON.parse('\" +\n                    JSON.stringify(pagesObjects) +\n                    \"');window.currentPage = JSON.parse('\" +\n                    JSON.stringify(urlArray.join('/')) +\n                    \"');</script>\"\n            )\n\n            res.send(newData)\n        }\n    )\n})\n\nexport default router\n"],"file":"live.js"}