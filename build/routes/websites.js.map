{"version":3,"sources":["../../src/routes/websites.js"],"names":["router","express","Router","post","auth","action","req","res","user","createWebsite","website","pagesObjects","Promise","all","pagesStructure","map","item","Page","findById","id","websites","push","_id","Website","_","pick","currentWebsite","save","send","put","websiteUserDescedant","urlNotOk","body","error","status","details","message","params","forEach","some","element","url","test","findByIdAndUpdate","websiteMiddleware","currentPage","deleteWebsite","get","toString"],"mappings":"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","sourcesContent":["import express from 'express'\nimport _ from 'lodash'\n\nimport auth from '../middleware/auth'\nimport action from '../middleware/action'\nimport websiteUserDescedant from '../middleware/websiteUserDescedant'\n\nimport { pagesStructureIsRight } from '../utils/checkDescedant'\nimport { User } from '../models/user'\nimport { Website, validateWebsite } from '../models/website'\nimport { Page } from '../models/page'\n\nimport type { userReqType, pagesStructureType } from '../custom-flow-types'\nimport type { $Request, $Response } from 'express'\n\nconst router = express.Router()\n\ntype postReqType = userReqType & $Request\n\n// $FlowFixMe\nrouter.post('/', [auth, action], async (req: postReqType, res: $Response) => {\n    const user = req.user\n    const website = await user.createWebsite()\n    const pagesObjects = {}\n    await Promise.all(\n        website.pagesStructure.map(async item => {\n            pagesObjects[item.id] = await Page.findById(item.id)\n        })\n    )\n\n    user.websites.push(website._id)\n    const websites = await Promise.all(\n        user.websites.map(async id => {\n            const website = await Website.findById(id)\n            return _.pick(website, ['_id', 'domain', 'title'])\n        })\n    )\n    user.currentWebsite = website\n    await user.save()\n\n    res.send({\n        website,\n        websites,\n        pagesObjects,\n    })\n})\n\ntype putReqType = {\n    body: {\n        pagesStructure: pagesStructureType,\n    },\n} & userReqType &\n    $Request\n// $FlowFixMe\nrouter.put(\n    '/:id',\n    [auth, action, websiteUserDescedant],\n    async (req: putReqType, res: $Response) => {\n        const user = req.user\n        let urlNotOk = false\n        const { error } = validateWebsite(req.body)\n        if (error) return res.status(400).send(error.details[0].message)\n\n        if (req.body.pagesStructure) {\n            if (\n                await pagesStructureIsRight(\n                    req.body.pagesStructure,\n                    req.params.id,\n                    res\n                )\n            ) {\n                return\n            }\n            req.body.pagesStructure.forEach(item => {\n                if (\n                    req.body.pagesStructure.some(\n                        element =>\n                            (element.url === item.url &&\n                                element.id !== item.id) ||\n                            !/^([A-Za-z0-9\\-\\_]+)$/.test(element.url)\n                    )\n                ) {\n                    urlNotOk = true\n                }\n            })\n        }\n        if (urlNotOk) {\n            return res.send({ urlNotOk: true })\n        }\n\n        const website = await Website.findByIdAndUpdate(\n            req.params.id,\n            req.body,\n            {\n                new: true,\n            }\n        )\n\n        const websites = await Promise.all(\n            user.websites.map(async id => {\n                const website = await Website.findById(id)\n                return _.pick(website, ['_id', 'domain', 'title'])\n            })\n        )\n        res.send({\n            website,\n            websites,\n        })\n    }\n)\n\ntype putCPReqType = {\n    body: {\n        currentPage: string,\n    },\n} & userReqType &\n    $Request\n\nconst websiteMiddleware = []\n\n// $FlowFixMe\nrouter.put(\n    '/currentpage/:id',\n    [auth, action, websiteUserDescedant],\n    async (req: putCPReqType, res: $Response) => {\n        const user = req.user\n        const { error } = validateWebsite(req.body)\n        if (error) return res.status(400).send(error.details[0].message)\n\n        await Website.findByIdAndUpdate(\n            req.params.id,\n            { currentPage: req.body.currentPage },\n            { new: true }\n        )\n        res.send({\n            status: true,\n        })\n    }\n)\n\ntype delReqType = userReqType & $Request\n// $FlowFixMe\nrouter.delete(\n    '/:id',\n    [auth, action, websiteUserDescedant],\n    async (req: delReqType, res: $Response) => {\n        const user = req.user\n\n        await user.deleteWebsite(req.params.id, res)\n        await user.save()\n\n        const websites = await Promise.all(\n            user.websites.map(async id => {\n                const website = await Website.findById(id)\n                return _.pick(website, ['_id', 'domain', 'title'])\n            })\n        )\n\n        const website = await Website.findById(user.currentWebsite)\n        const pagesObjects = {}\n        if (website) {\n            await Promise.all(\n                website.pagesStructure.map(async item => {\n                    pagesObjects[item.id] = await Page.findById(item.id)\n                })\n            )\n        }\n\n        res.send({\n            website,\n            websites,\n            pagesObjects,\n        })\n    }\n)\n\ntype getReqType = userReqType & $Request\n// $FlowFixMe\nrouter.get(\n    '/:id',\n    [auth, action, websiteUserDescedant],\n    async (req: getReqType, res: $Response) => {\n        const user = req.user\n        let website = false\n        if (\n            user.websites.some(\n                website => website.toString() === req.params.id.toString()\n            )\n        ) {\n            website = await Website.findById(req.params.id)\n            user.currentWebsite = website\n            await user.save()\n        }\n        if (!website)\n            return res\n                .status(404)\n                .send('The website with the given ID was not found.')\n\n        const pagesObjects = {}\n        await Promise.all(\n            website.pagesStructure.map(async item => {\n                pagesObjects[item.id] = await Page.findById(item.id)\n            })\n        )\n\n        res.send({\n            website,\n            pagesObjects,\n        })\n    }\n)\n\nexport default router\n"],"file":"websites.js"}