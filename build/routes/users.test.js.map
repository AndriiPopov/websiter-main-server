{"version":3,"sources":["../../src/routes/users.test.js"],"names":["server","describe","beforeEach","serverObj","afterEach","close","Page","remove","Website","User","it","headersAreGood","expect","toBeTruthy","users","websites","pages","currentWebsite","currentPage","tokens","get","set","res","result","JSON","parse","text","structure","findById","_id","user","Promise","all","map","id","website","_","pick","pagesObjects","pagesStructure","item","email","toEqual","toObject","post","send","password","status","toBe","toString","oldStructure","newStructure","length"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport serverObj from '../index'\nimport request from 'supertest'\nimport { User } from '../models/user'\nimport { Website } from '../models/website'\nimport { Page } from '../models/page'\nimport {\n    getDBStructure,\n    populateTestDB,\n    pure,\n} from '../utils/testPopulateDBandReadStructure'\nimport { testTokenAndCurrentAction } from '../utils/testTokenAndCurrentAction.test'\n\nlet server\n\ndescribe('/api/users', () => {\n    beforeEach(() => {\n        server = serverObj\n    })\n\n    afterEach(async () => {\n        server.close()\n        await Page.remove({})\n        await Website.remove({})\n        await User.remove({})\n    })\n\n    describe('GET /', () => {\n        it('should respond error 400/401/412 if no token in headers, wrong token, no current action or wrong currentaction', async () => {\n            const headersAreGood = await testTokenAndCurrentAction(\n                server,\n                'get',\n                'users'\n            )\n            expect(headersAreGood).toBeTruthy()\n        })\n\n        it('should respond with email, website, websites, and pagesStructure', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n\n            const res = await request(server)\n                .get('/api/users')\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n\n            const result = JSON.parse(res.text)\n            const structure = await getDBStructure()\n            const user = await User.findById(structure[1]._id)\n            const websites = await Promise.all(\n                user.websites.map(async id => {\n                    const website = await Website.findById(id)\n                    return _.pick(website, ['_id', 'domain', 'title'])\n                })\n            )\n            const website = await Website.findById(user.currentWebsite)\n            const pagesObjects = {}\n            await Promise.all(\n                website.pagesStructure.map(async item => {\n                    pagesObjects[item.id] = await Page.findById(item.id)\n                })\n            )\n\n            expect(result.email).toEqual(user.email)\n            expect(result.websites).toEqual(pure(websites))\n            expect(result.website).toEqual(pure(website.toObject()))\n            expect(result.pagesObjects).toEqual(pure(pagesObjects))\n        })\n\n        it('should respond with email, website, websites, and pagesStructure for empty website', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 3,\n                currentPage: 0,\n            })\n\n            const res = await request(server)\n                .get('/api/users')\n                .set('X-Auth-Token', tokens[0])\n                .set('Current-Action', '10')\n\n            const result = JSON.parse(res.text)\n            const structure = await getDBStructure()\n            const user = await User.findById(structure[0]._id)\n            const websites = await Promise.all(\n                user.websites.map(async id => {\n                    const website = await Website.findById(id)\n                    return _.pick(website, ['_id', 'domain', 'title'])\n                })\n            )\n            const website = await Website.findById(user.currentWebsite)\n\n            expect(result.email).toEqual(user.email)\n            expect(result.websites).toEqual(pure(websites))\n            expect(result.website).toEqual(pure(website.toObject()))\n            expect(result.pagesObjects).toEqual({})\n        })\n\n        it('should respond with email, website, websites, and pagesStructure for empty user', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 3,\n                currentPage: 0,\n            })\n\n            const res = await request(server)\n                .get('/api/users')\n                .set('X-Auth-Token', tokens[2])\n                .set('Current-Action', '10')\n\n            const result = JSON.parse(res.text)\n            const structure = await getDBStructure()\n            const user = await User.findById(structure[2]._id)\n            const websites = await Promise.all(\n                user.websites.map(async id => {\n                    const website = await Website.findById(id)\n                    return _.pick(website, ['_id', 'domain', 'title'])\n                })\n            )\n\n            expect(result.email).toEqual(user.email)\n            expect(result.websites).toEqual([])\n            expect(result.website).toEqual({})\n            expect(result.pagesObjects).toEqual({})\n        })\n    })\n\n    describe('POST /', () => {\n        it('should respond error 400 if not valid data', async () => {\n            let res = await request(server)\n                .post('/api/users')\n                .send({\n                    email: 'aaa@aaa.aaa',\n                    password: '1',\n                })\n            expect(res.status).toBe(400)\n\n            res = await request(server)\n                .post('/api/users')\n                .send({\n                    email: 'aaa@aaa',\n                    password: '12345',\n                })\n            expect(res.status).toBe(400)\n        })\n\n        it('should respond with email, website, websites, and pagesStructure for valid email and password and reject user create for the same email address', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n\n            let res = await request(server)\n                .post('/api/users')\n                .send({\n                    email: 'aaa@aaa.aaa',\n                    password: '123456',\n                })\n\n            const result = JSON.parse(res.text)\n            const structure = await getDBStructure()\n            const user = await User.findById(structure[3]._id)\n            const websites = await Promise.all(\n                user.websites.map(async id => {\n                    const website = await Website.findById(id)\n                    return _.pick(website, ['_id', 'domain', 'title'])\n                })\n            )\n            const website = await Website.findById(user.currentWebsite)\n            const pagesObjects = {}\n            await Promise.all(\n                website.pagesStructure.map(async item => {\n                    pagesObjects[item.id] = await Page.findById(item.id)\n                })\n            )\n\n            expect(res.status).toBe(200)\n            expect(result._id).toEqual(user._id.toString())\n            expect(result.email).toEqual(user.email)\n            expect(result.websites).toEqual(pure(websites))\n            expect(result.website).toEqual(pure(website.toObject()))\n            expect(result.pagesObjects).toEqual(pure(pagesObjects))\n\n            res = await request(server)\n                .post('/api/users')\n                .send({\n                    email: 'aaa@aaa.aaa',\n                    password: '123456',\n                })\n            expect(res.status).toBe(400)\n        })\n    })\n\n    describe('DELETE /', () => {\n        it('should respond error 400/401/412 if no token in headers, wrong token, no current action or wrong currentaction', async () => {\n            const headersAreGood = await testTokenAndCurrentAction(\n                server,\n                'delete',\n                'users'\n            )\n            expect(headersAreGood).toBeTruthy()\n        })\n\n        it('should delete user and send status true', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n            const oldStructure = await getDBStructure()\n            let res = await request(server)\n                .delete('/api/users')\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n            expect(res.status).toBe(200)\n\n            const newStructure = await getDBStructure()\n            expect(oldStructure.length).toBe(3)\n            expect(newStructure.length).toBe(2)\n\n            res = await request(server)\n                .delete('/api/users')\n                .set('Current-Action', '11')\n                .set('X-Auth-Token', tokens[1])\n            expect(res.status).toBe(400)\n        })\n    })\n})\n"],"file":"users.test.js"}