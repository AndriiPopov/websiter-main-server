{"version":3,"sources":["../../src/routes/users.js"],"names":["router","express","Router","get","auth","req","res","user","Promise","all","websites","map","id","Website","findById","website","_","pick","currentWebsite","length","save","pagesObjects","pagesStructure","item","Page","send","email","currentAction","post","body","error","status","details","message","User","findOne","password","bcrypt","genSalt","salt","hash","createWebsite","push","_id","token","generateAuthToken","set","action","websiteId","deleteWebsite","findByIdAndRemove"],"mappings":"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","sourcesContent":["import auth from '../middleware/auth'\nimport bcrypt from 'bcryptjs'\nimport _ from 'lodash'\nimport { Page } from '../models/page'\nimport { Website } from '../models/website'\nimport { User, validateUser } from '../models/user'\nimport express from 'express'\nimport type { $Request, $Response } from 'express'\nimport action from '../middleware/action'\nimport type { userReqType } from '../custom-flow-types'\n\nconst router = express.Router()\n\ntype getReqType = userReqType & $Request\n\nrouter.get('/', auth, async (req: getReqType, res: $Response) => {\n    const user = req.user\n    const websites = await Promise.all(\n        user.websites.map(async id => {\n            const website = await Website.findById(id)\n            return _.pick(website, ['_id', 'domain', 'title'])\n        })\n    )\n\n    let website\n    if (user.currentWebsite) {\n        website = await Website.findById(user.currentWebsite)\n    }\n\n    if (!website && user.websites.length > 0) {\n        website = await Website.findById(user.websites[0])\n        user.currentWebsite = website\n        await user.save()\n    }\n\n    const pagesObjects = {}\n    if (website) {\n        await Promise.all(\n            website.pagesStructure.map(async item => {\n                pagesObjects[item.id] = await Page.findById(item.id)\n            })\n        )\n    } else {\n        website = {}\n    }\n\n    res.send({\n        email: user.email,\n        website,\n        websites,\n        pagesObjects,\n        currentAction: user.currentAction,\n    })\n})\n\ntype postReqType = {\n    body: {\n        email: string,\n        password: string,\n    },\n} & userReqType &\n    $Request\n\nrouter.post('/', async (req: postReqType, res: $Response) => {\n    const { error } = validateUser(req.body)\n    if (error) {\n        return res.status(400).send(error.details[0].message)\n    }\n\n    let user = await User.findOne({ email: req.body.email })\n\n    if (user) {\n        return res.status(400).send('User already registered.')\n    }\n\n    user = new User({\n        email: req.body.email,\n        password: req.body.password,\n        currentAction: 0,\n    })\n\n    const salt = await bcrypt.genSalt(10)\n    user.password = await bcrypt.hash(user.password, salt)\n\n    const website = await user.createWebsite(user)\n\n    const pagesObjects = {}\n    await Promise.all(\n        website.pagesStructure.map(async item => {\n            pagesObjects[item.id] = await Page.findById(item.id)\n        })\n    )\n\n    user.websites.push(website._id)\n    const websites = await Promise.all(\n        user.websites.map(async id => {\n            const website = await Website.findById(id)\n            return _.pick(website, ['_id', 'domain', 'title'])\n        })\n    )\n\n    await user.save()\n\n    req.user = user\n\n    const token = user.generateAuthToken()\n    res.set({\n        'X-Auth-Token': token,\n    }).send({\n        ..._.pick(user, ['_id', 'email']),\n        token,\n        website,\n        websites,\n        pagesObjects,\n        currentAction: user.currentAction,\n    })\n})\n\ntype delReqType = userReqType & $Request\n\nrouter.delete('/', auth, action, async (req: delReqType, res: $Response) => {\n    const user = req.user\n    await Promise.all(\n        user.websites.map(async websiteId => {\n            await user.deleteWebsite(websiteId, res)\n        })\n    )\n    await User.findByIdAndRemove(user._id)\n\n    res.send({\n        status: true,\n    })\n})\n\nexport default router\n"],"file":"users.js"}