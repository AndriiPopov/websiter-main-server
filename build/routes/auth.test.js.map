{"version":3,"sources":["../../src/routes/auth.test.js"],"names":["server","describe","beforeEach","serverObj","afterEach","close","Page","remove","Website","User","it","post","send","email","password","res","expect","status","toBe","users","websites","pages","currentWebsite","currentPage","tokens","result","JSON","parse","text","structure","findById","_id","user","Promise","all","map","id","website","_","pick","pagesObjects","pagesStructure","item","toEqual","toObject","get","set","token","resNew"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport serverObj from '../index'\nimport request from 'supertest'\nimport { User } from '../models/user'\nimport { Website } from '../models/website'\nimport { Page } from '../models/page'\nimport {\n    getDBStructure,\n    populateTestDB,\n    pure,\n} from '../utils/testPopulateDBandReadStructure'\n\nlet server\n\ndescribe('/api/auth', () => {\n    beforeEach(() => {\n        server = serverObj\n    })\n\n    afterEach(async () => {\n        server.close()\n        await Page.remove({})\n        await Website.remove({})\n        await User.remove({})\n    })\n\n    describe('POST /', () => {\n        it('should respond error 400 if user not found or password is wrong or both', async () => {\n            let res = await request(server)\n                .post('/api/auth')\n                .send({\n                    email: 'bbb.bbb@bbb',\n                    password: '12345',\n                })\n            expect(res.status).toBe(400)\n\n            res = await request(server)\n                .post('/api/auth')\n                .send({\n                    email: 'myemail_0@domain0.com',\n                    password: '12345',\n                })\n            expect(res.status).toBe(400)\n\n            res = await request(server)\n                .post('/api/auth')\n                .send({\n                    email: 'myemail@domain.com',\n                    password: '12345_0',\n                })\n            expect(res.status).toBe(400)\n        })\n\n        it('should respond with token, email, website, websites, and pageObjects', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n\n            const res = await request(server)\n                .post('/api/auth')\n                .send({\n                    email: 'myemail_0@domain0.com',\n                    password: '12345_0',\n                })\n\n            const result = JSON.parse(res.text)\n            const structure = await getDBStructure()\n            const user = await User.findById(structure[0]._id)\n            const websites = await Promise.all(\n                user.websites.map(async id => {\n                    const website = await Website.findById(id)\n                    return _.pick(website, ['_id', 'domain', 'title'])\n                })\n            )\n            const website = await Website.findById(user.currentWebsite)\n            const pagesObjects = {}\n            await Promise.all(\n                website.pagesStructure.map(async item => {\n                    pagesObjects[item.id] = await Page.findById(item.id)\n                })\n            )\n\n            expect(result.email).toEqual(user.email)\n            expect(result.websites).toEqual(pure(websites))\n            expect(result.website).toEqual(pure(website.toObject()))\n            expect(result.pagesObjects).toEqual(pure(pagesObjects))\n\n            const resNew = await request(server)\n                .get('/api/users')\n                .set('X-Auth-Token', result.token)\n            expect(resNew.status).toBe(200)\n        })\n\n        it('should respond with email, website, websites, and pagesStructure for empty website', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 3,\n                currentPage: 0,\n            })\n\n            const res = await request(server)\n                .post('/api/auth')\n                .send({\n                    email: 'myemail_0@domain0.com',\n                    password: '12345_0',\n                })\n\n            const result = JSON.parse(res.text)\n            const structure = await getDBStructure()\n            const user = await User.findById(structure[0]._id)\n            const websites = await Promise.all(\n                user.websites.map(async id => {\n                    const website = await Website.findById(id)\n                    return _.pick(website, ['_id', 'domain', 'title'])\n                })\n            )\n            const website = await Website.findById(user.currentWebsite)\n\n            expect(result.email).toEqual(user.email)\n            expect(result.websites).toEqual(pure(websites))\n            expect(result.website).toEqual(pure(website.toObject()))\n            expect(result.pagesObjects).toEqual({})\n\n            const resNew = await request(server)\n                .get('/api/users')\n                .set('X-Auth-Token', result.token)\n            expect(resNew.status).toBe(200)\n        })\n\n        it('should respond with email, website, websites, and pagesStructure for empty user', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 3,\n                currentPage: 0,\n            })\n\n            const res = await request(server)\n                .post('/api/auth')\n                .send({\n                    email: 'myemail_2@domain2.com',\n                    password: '12345_2',\n                })\n\n            const result = JSON.parse(res.text)\n            const structure = await getDBStructure()\n            const user = await User.findById(structure[2]._id)\n            const websites = await Promise.all(\n                user.websites.map(async id => {\n                    const website = await Website.findById(id)\n                    return _.pick(website, ['_id', 'domain', 'title'])\n                })\n            )\n\n            expect(result.email).toEqual(user.email)\n            expect(result.websites).toEqual([])\n            expect(result.website).toEqual({})\n            expect(result.pagesObjects).toEqual({})\n\n            const resNew = await request(server)\n                .get('/api/users')\n                .set('X-Auth-Token', result.token)\n            expect(resNew.status).toBe(200)\n        })\n    })\n})\n"],"file":"auth.test.js"}