{"version":3,"sources":["../../src/routes/auth.js"],"names":["router","express","Router","post","req","res","body","error","status","send","details","message","User","findOne","email","user","bcrypt","compare","password","validPassword","Promise","all","websites","map","id","Website","findById","website","_","pick","currentWebsite","length","save","pagesObjects","pagesStructure","item","Page","token","generateAuthToken","set","currentAction"],"mappings":"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","sourcesContent":["import Joi from 'joi'\nimport bcrypt from 'bcryptjs'\nimport _ from 'lodash'\nimport { Page } from '../models/page'\nimport { Website } from '../models/website'\nimport { User, validateUser } from '../models/user'\nimport express from 'express'\nimport type { $Request, $Response } from 'express'\nconst router = express.Router()\n\ntype reqType = {\n    body: {\n        email: string,\n        password: string,\n    },\n}\n\nrouter.post('/', async (req: reqType, res: $Response) => {\n    const { error } = validateUser(req.body)\n    if (error) return res.status(400).send(error.details[0].message)\n    let user = await User.findOne({ email: req.body.email })\n    if (!user) return res.status(400).send('Invalid email or password.')\n\n    const validPassword = await bcrypt.compare(req.body.password, user.password)\n    if (!validPassword)\n        return res.status(400).send('Invalid email or password.')\n\n    const websites = await Promise.all(\n        user.websites.map(async id => {\n            const website = await Website.findById(id)\n            return _.pick(website, ['_id', 'domain', 'title'])\n        })\n    )\n\n    let website\n    if (user.currentWebsite) {\n        website = await Website.findById(user.currentWebsite)\n    }\n\n    if (!website && user.websites.length > 0) {\n        website = await Website.findById(user.websites[0])\n        user.currentWebsite = website\n        user.save()\n    }\n\n    const pagesObjects = {}\n    if (website) {\n        await Promise.all(\n            website.pagesStructure.map(async item => {\n                pagesObjects[item.id] = await Page.findById(item.id)\n            })\n        )\n    } else {\n        website = {}\n    }\n\n    const token = user.generateAuthToken()\n    res.set({\n        'X-Auth-Token': token,\n    }).send({\n        ..._.pick(user, ['_id', 'email']),\n        token: token,\n        websites,\n        website,\n        pagesObjects,\n        currentAction: user.currentAction,\n    })\n})\n\nexport default router\n"],"file":"auth.js"}