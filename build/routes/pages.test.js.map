{"version":3,"sources":["../../src/routes/pages.test.js"],"names":["server","describe","beforeEach","serverObj","afterEach","close","Page","remove","Website","User","it","headersAreGood","expect","toBeTruthy","users","websites","pages","currentWebsite","currentPage","tokens","structure","post","set","send","currentPageId","websiteId","_id","duplicate","res","status","toBe","oldStructure","result","JSON","parse","text","findById","website","pagesStructure","id","sourcePage","page","length","toEqual","sourcePageLean","_","omit","toJSON","pageLean","not","put","content","url","title","newWebsite","newPagesStructure","descedants","map","item","push","newStructure","isHomePage","sampleData","publishOne","updatedPagesStructure","page2","publishedVersion","key_1","key_2","newPage","newPage2","success","pagesObjects","Promise","all"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport serverObj from '../index'\nimport request from 'supertest'\nimport { User } from '../models/user'\nimport { Website } from '../models/website'\nimport { Page } from '../models/page'\nimport {\n    getDBStructure,\n    populateTestDB,\n    pure,\n} from '../utils/testPopulateDBandReadStructure'\nimport { findDescendants } from '../utils/pagesStructure'\nimport { testTokenAndCurrentAction } from '../utils/testTokenAndCurrentAction.test'\n\nlet server\n\ndescribe('/api/pages', () => {\n    beforeEach(() => {\n        server = serverObj\n    })\n\n    afterEach(async () => {\n        server.close()\n        await Page.remove({})\n        await Website.remove({})\n        await User.remove({})\n    })\n\n    describe('POST /', () => {\n        it('should respond error 400/401/412 if no token in headers, wrong token, no current action or wrong currentaction', async () => {\n            const headersAreGood = await testTokenAndCurrentAction(\n                server,\n                'post',\n                'pages'\n            )\n            expect(headersAreGood).toBeTruthy()\n        })\n\n        it('should respond error 401/400/404 wrong data, or wrong user, wrong page or wrong website', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n\n            const structure = await getDBStructure()\n\n            let res = await request(server)\n                .post('/api/pages}')\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[0])\n                .send({\n                    currentPageId: structure[1].websites[2].pages[0],\n                    websiteId: structure[1].websites[2]._id,\n                    duplicate: true,\n                })\n            expect(res.status).toBe(404)\n\n            res = await request(server)\n                .post('/api/pages')\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    currentPageId: 'dsdfds',\n                    websiteId: structure[1].websites[2]._id,\n                    duplicate: true,\n                })\n            expect(res.status).toBe(400)\n\n            res = await request(server)\n                .post('/api/pages')\n                .set('Current-Action', '11')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    currentPageId: structure[1].websites[2].pages[0],\n                    websiteId: 'structure[1].websites[2]._id',\n                    duplicate: true,\n                })\n            expect(res.status).toBe(400)\n\n            res = await request(server)\n                .post('/api/pages')\n                .set('Current-Action', '12')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    currentPageId: structure[1].websites[2].pages[0],\n                    websiteId: structure[1].websites[2]._id,\n                    duplicate: 'truedfsfds',\n                })\n            expect(res.status).toBe(400)\n\n            res = await request(server)\n                .post('/api/pages')\n                .set('Current-Action', '13')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    currentPageId: structure[0].websites[2].pages[0],\n                    websiteId: structure[1].websites[2]._id,\n                    duplicate: true,\n                })\n            expect(res.status).toBe(404)\n\n            res = await request(server)\n                .post('/api/pages')\n                .set('Current-Action', '14')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    currentPageId: structure[1].websites[1].pages[0],\n                    websiteId: structure[1].websites[2]._id,\n                    duplicate: true,\n                })\n            expect(res.status).toBe(404)\n\n            res = await request(server)\n                .post('/api/pages')\n                .set('Current-Action', '15')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    currentPageId: structure[1].websites[2].pages[0],\n                    websiteId: structure[1].websites[1]._id,\n                    duplicate: true,\n                })\n            expect(res.status).toBe(404)\n        })\n\n        it('should respond with page and pagesStructure for duplicate false', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n\n            const oldStructure = await getDBStructure()\n\n            const res = await request(server)\n                .post('/api/pages')\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    currentPageId: oldStructure[1].websites[2].pages[0],\n                    websiteId: oldStructure[1].websites[2]._id,\n                })\n            expect(res.status).toBe(200)\n\n            const result = JSON.parse(res.text)\n            const structure = await getDBStructure()\n            const website = await Website.findById(structure[1].websites[2])\n            const sourcePage = await Page.findById(website.pagesStructure[0].id)\n            const page = await Page.findById(website.pagesStructure[11].id)\n\n            expect(\n                oldStructure[1].websites[2].pages.length -\n                    website.pagesStructure.length\n            ).toEqual(-1)\n            expect(result.page).toEqual(pure(page))\n            expect(result.pagesStructure).toEqual(pure(website.pagesStructure))\n            const sourcePageLean = _.omit(sourcePage.toJSON(), ['_id'])\n            const pageLean = _.omit(page.toJSON(), ['_id'])\n            expect(sourcePageLean).not.toEqual(pageLean)\n        })\n\n        it('should respond with page and pagesStructure for duplicate true', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n\n            const oldStructure = await getDBStructure()\n\n            const res = await request(server)\n                .post('/api/pages')\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    currentPageId: oldStructure[1].websites[2].pages[0],\n                    websiteId: oldStructure[1].websites[2]._id,\n                    duplicate: true,\n                })\n            expect(res.status).toBe(200)\n\n            const result = JSON.parse(res.text)\n            const structure = await getDBStructure()\n            const website = await Website.findById(structure[1].websites[2])\n            const sourcePage = await Page.findById(website.pagesStructure[0].id)\n            const page = await Page.findById(website.pagesStructure[11].id)\n\n            expect(\n                oldStructure[1].websites[2].pages.length -\n                    website.pagesStructure.length\n            ).toEqual(-1)\n            expect(result.page).toEqual(pure(page))\n            expect(result.pagesStructure).toEqual(pure(website.pagesStructure))\n            const sourcePageLean = _.omit(sourcePage.toJSON(), ['_id'])\n            const pageLean = _.omit(page.toJSON(), ['_id'])\n            expect(sourcePageLean).toEqual(pageLean)\n        })\n    })\n\n    describe('PUT /', () => {\n        it('should respond error 400/401/412 if no token in headers, wrong token, no current action or wrong currentaction', async () => {\n            const headersAreGood = await testTokenAndCurrentAction(\n                server,\n                'put',\n                'pages/12'\n            )\n            expect(headersAreGood).toBeTruthy()\n        })\n\n        it('should respond error 401/400/404 if wrong data, or wrong user, wrong page or wrong website', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n\n            const structure = await getDBStructure()\n            const website = await Website.findById(structure[1].websites[2]._id)\n            const pagesStructure = pure(website.pagesStructure)\n\n            let res = await request(server)\n                .put(`/api/pages/${structure[1].websites[2].pages[0]}`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[0])\n                .send({\n                    content: { content: 'is new' },\n                    pagesStructure: pagesStructure,\n                })\n            expect(res.status).toBe(404)\n\n            res = await request(server)\n                .put(`/api/pages/${structure[1].websites[2].pages[0]}`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    content: 'asdasdasd',\n                    pagesStructure: pagesStructure,\n                })\n            expect(res.status).toBe(400)\n\n            res = await request(server)\n                .put(`/api/pages/${structure[1].websites[2].pages[0]}`)\n                .set('Current-Action', '11')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    content: { content: 'is new' },\n                    pagesStructure: 'pagesStructure',\n                })\n            expect(res.status).toBe(400)\n\n            res = await request(server)\n                .put(`/api/pages/${structure[1].websites[2].pages[0]}`)\n                .set('Current-Action', '12')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    content: { content: 'is new' },\n                    pagesStructure: [\n                        ...pagesStructure,\n                        {\n                            url: 'dfklfsdlf',\n                            id: structure[1].websites[1].pages[0],\n                        },\n                    ],\n                })\n            expect(res.status).toBe(404)\n        })\n\n        it('should respond with status true', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n\n            const structure = await getDBStructure()\n            const website = await Website.findById(structure[1].websites[2]._id)\n            const pagesStructure = pure(website.pagesStructure)\n            pagesStructure[0] = {\n                ...pagesStructure[0],\n                title: 'super',\n            }\n\n            const res = await request(server)\n                .put(`/api/pages/${structure[1].websites[2].pages[0]}`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    content: { content: 'is new' },\n                    pagesStructure: pagesStructure,\n                })\n            expect(res.status).toBe(200)\n\n            const result = JSON.parse(res.text)\n            const newWebsite = await Website.findById(\n                structure[1].websites[2]._id\n            )\n            const page = await Page.findById(structure[1].websites[2].pages[0])\n            const newPagesStructure = pure(newWebsite.pagesStructure)\n\n            expect(newPagesStructure).toEqual(pagesStructure)\n            expect(newPagesStructure[0].title).toEqual('super')\n            expect(page.content).toEqual({ content: 'is new' })\n        })\n    })\n\n    describe('DELETE /', () => {\n        it('should respond error 400/401/412 if no token in headers, wrong token, no current action or wrong currentaction', async () => {\n            const headersAreGood = await testTokenAndCurrentAction(\n                server,\n                'delete',\n                'pages/12'\n            )\n            expect(headersAreGood).toBeTruthy()\n        })\n\n        it('should respond error 401/400/404 wrong data, or wrong user, wrong page or wrong website', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n\n            const structure = await getDBStructure()\n\n            let res = await request(server)\n                .delete(`/api/pages/${structure[1].websites[2].pages[0]}`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[0])\n            expect(res.status).toBe(404)\n        })\n\n        it('should respond with pagesStructure and currentPage', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n\n            const structure = await getDBStructure()\n            const website = await Website.findById(structure[1].websites[2]._id)\n            const pagesStructure = pure(website.pagesStructure)\n            const descedants = findDescendants(\n                pagesStructure,\n                structure[1].websites[2].pages[0]\n            ).map(item => item.id)\n            descedants.push(structure[1].websites[2].pages[0])\n\n            const res = await request(server)\n                .delete(`/api/pages/${structure[1].websites[2].pages[0]}`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n            expect(res.status).toBe(200)\n\n            const result = JSON.parse(res.text)\n            const newStructure = await getDBStructure()\n            const newWebsite = await Website.findById(\n                newStructure[1].websites[2]._id\n            )\n            const newPagesStructure = pure(newWebsite.pagesStructure)\n\n            expect(newPagesStructure).not.toEqual(pagesStructure)\n            expect(newPagesStructure[0]).not.toEqual(pagesStructure[0])\n            expect(newPagesStructure[0].isHomePage).toBeTruthy()\n            expect(newPagesStructure[0].id).toEqual(result.currentPage)\n            expect(result.pagesStructure).toEqual(newPagesStructure)\n            expect(result.pagesStructure.length).toEqual(\n                pagesStructure.length - descedants.length\n            )\n        })\n    })\n\n    describe('POST/PUBLISH /', () => {\n        it('should respond error 400/401/412 if no token in headers, wrong token, no current action or wrong currentaction', async () => {\n            const headersAreGood = await testTokenAndCurrentAction(\n                server,\n                'post',\n                'pages/publish'\n            )\n            expect(headersAreGood).toBeTruthy()\n        })\n\n        it('should respond error 401/400/404 wrong data, or wrong user, wrong page or wrong website', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n\n            const structure = await getDBStructure()\n            const website = await Website.findById(structure[1].websites[2]._id)\n            const pagesStructure = pure(website.pagesStructure)\n            const sampleData = {\n                currentPageId: structure[1].websites[2].pages[0],\n                websiteId: structure[1].websites[2]._id,\n                pagesStructure: pagesStructure,\n                publishOne: true,\n            }\n\n            let res = await request(server)\n                .post(`/api/pages/publish`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[0])\n                .send(sampleData)\n            expect(res.status).toBe(404)\n\n            res = await request(server)\n                .post(`/api/pages/publish`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    ...sampleData,\n                    currentPage: structure[1].websites[1].pages[0],\n                })\n            expect(res.status).toBe(400)\n\n            res = await request(server)\n                .post(`/api/pages/publish`)\n                .set('Current-Action', '11')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    ...sampleData,\n                    currentPage: structure[0].websites[1].pages[0],\n                })\n            expect(res.status).toBe(400)\n\n            res = await request(server)\n                .post(`/api/pages/publish`)\n                .set('Current-Action', '12')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    ...sampleData,\n                    websiteId: structure[1].websites[1]._id,\n                })\n            expect(res.status).toBe(404)\n\n            const updatedPagesStructure = [...pagesStructure]\n            updatedPagesStructure[3] = {\n                id: structure[0].websites[1].pages[3],\n                url: 'sdasdasd',\n            }\n            res = await request(server)\n                .post(`/api/pages/publish`)\n                .set('Current-Action', '13')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    ...sampleData,\n                    pagesStructure: updatedPagesStructure,\n                })\n            expect(res.status).toBe(404)\n\n            res = await request(server)\n                .post(`/api/pages/publish`)\n                .set('Current-Action', '14')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    ...sampleData,\n                    publishOne: 'one',\n                })\n            expect(res.status).toBe(400)\n        })\n\n        it('should respond with success true when publishOne is true', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n\n            const structure = await getDBStructure()\n            const website = await Website.findById(structure[1].websites[2]._id)\n            const pagesStructure = pure(website.pagesStructure)\n            pagesStructure[0].title = 'updated'\n            const page = await Page.findById(structure[1].websites[2].pages[0])\n            const page2 = await Page.findById(structure[1].websites[2].pages[2])\n\n            expect(pure(page.content)).not.toEqual(\n                pure(page.publishedVersion.content)\n            )\n            expect(pure(page.publishedVersion.content)).toEqual({\n                key_1: 'User_1 Website 2_Page_0_value_1_key_1_old',\n                key_2: 'User_1 Website 2_Page_0_value_2_key_2_old',\n            })\n\n            expect(pure(page2.content)).not.toEqual(\n                pure(page2.publishedVersion.content)\n            )\n            expect(pure(page2.publishedVersion.content)).toEqual({\n                key_1: 'User_1 Website 2_Page_2_value_1_key_1_old',\n                key_2: 'User_1 Website 2_Page_2_value_2_key_2_old',\n            })\n\n            const res = await request(server)\n                .post(`/api/pages/publish`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    currentPageId: structure[1].websites[2].pages[0],\n                    websiteId: structure[1].websites[2]._id,\n                    pagesStructure: pagesStructure,\n                    publishOne: true,\n                })\n            expect(res.status).toBe(200)\n\n            const result = JSON.parse(res.text)\n            const newStructure = await getDBStructure()\n            const newWebsite = await Website.findById(\n                newStructure[1].websites[2]._id\n            )\n            const newPagesStructure = pure(newWebsite.pagesStructure)\n            const newPage = await Page.findById(\n                structure[1].websites[2].pages[0]\n            )\n            const newPage2 = await Page.findById(\n                structure[1].websites[2].pages[2]\n            )\n\n            expect(newPagesStructure[0].title).toBe('updated')\n            expect(pure(newPage.content)).toEqual(\n                pure(newPage.publishedVersion.content)\n            )\n            expect(pure(newPage.content)).toEqual(pure(page.content))\n            expect(pure(newPage.publishedVersion.content)).toEqual({\n                key_1: 'User_1 Website 2_Page_0_value_1_key_1',\n                key_2: 'User_1 Website 2_Page_0_value_2_key_2',\n            })\n            expect(pure(newPage2.content)).not.toEqual(\n                pure(newPage2.publishedVersion.content)\n            )\n            expect(pure(newPage2.content)).toEqual(pure(page2.content))\n            expect(pure(newPage2.publishedVersion.content)).toEqual({\n                key_1: 'User_1 Website 2_Page_2_value_1_key_1_old',\n                key_2: 'User_1 Website 2_Page_2_value_2_key_2_old',\n            })\n            expect(result.success).toBeTruthy()\n        })\n\n        it('should respond with success true when publishOne is true', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n\n            const structure = await getDBStructure()\n            const website = await Website.findById(structure[1].websites[2]._id)\n            const pagesStructure = pure(website.pagesStructure)\n            pagesStructure[0].title = 'updated'\n            const page = await Page.findById(structure[1].websites[2].pages[0])\n            const page2 = await Page.findById(structure[1].websites[2].pages[2])\n\n            expect(pure(page.content)).not.toEqual(\n                pure(page.publishedVersion.content)\n            )\n            expect(pure(page.publishedVersion.content)).toEqual({\n                key_1: 'User_1 Website 2_Page_0_value_1_key_1_old',\n                key_2: 'User_1 Website 2_Page_0_value_2_key_2_old',\n            })\n\n            expect(pure(page2.content)).not.toEqual(\n                pure(page2.publishedVersion.content)\n            )\n            expect(pure(page2.publishedVersion.content)).toEqual({\n                key_1: 'User_1 Website 2_Page_2_value_1_key_1_old',\n                key_2: 'User_1 Website 2_Page_2_value_2_key_2_old',\n            })\n\n            const res = await request(server)\n                .post(`/api/pages/publish`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    currentPageId: structure[1].websites[2].pages[0],\n                    websiteId: structure[1].websites[2]._id,\n                    pagesStructure: pagesStructure,\n                    publishOne: false,\n                })\n            expect(res.status).toBe(200)\n\n            const result = JSON.parse(res.text)\n            const newStructure = await getDBStructure()\n            const newWebsite = await Website.findById(\n                newStructure[1].websites[2]._id\n            )\n            const newPagesStructure = pure(newWebsite.pagesStructure)\n            const newPage = await Page.findById(\n                structure[1].websites[2].pages[0]\n            )\n            const newPage2 = await Page.findById(\n                structure[1].websites[2].pages[2]\n            )\n\n            expect(newPagesStructure[0].title).toBe('updated')\n            expect(pure(newPage.content)).toEqual(\n                pure(newPage.publishedVersion.content)\n            )\n            expect(pure(newPage.content)).toEqual(pure(page.content))\n            expect(pure(newPage.publishedVersion.content)).toEqual({\n                key_1: 'User_1 Website 2_Page_0_value_1_key_1',\n                key_2: 'User_1 Website 2_Page_0_value_2_key_2',\n            })\n            expect(pure(newPage2.content)).toEqual(\n                pure(newPage2.publishedVersion.content)\n            )\n            expect(pure(newPage2.content)).toEqual(pure(page2.content))\n            expect(pure(newPage2.publishedVersion.content)).toEqual({\n                key_1: 'User_1 Website 2_Page_2_value_1_key_1',\n                key_2: 'User_1 Website 2_Page_2_value_2_key_2',\n            })\n            expect(result.success).toBeTruthy()\n        })\n    })\n\n    describe('POST/REVERT /', () => {\n        it('should respond error 400/401/412 if no token in headers, wrong token, no current action or wrong currentaction', async () => {\n            const headersAreGood = await testTokenAndCurrentAction(\n                server,\n                'post',\n                'pages/revert'\n            )\n            expect(headersAreGood).toBeTruthy()\n        })\n\n        it('should respond error 401/400/404 if wrong data, or wrong user, wrong page or wrong website', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n\n            const structure = await getDBStructure()\n            const website = await Website.findById(structure[1].websites[2]._id)\n            const pagesStructure = pure(website.pagesStructure)\n            const sampleData = {\n                currentPageId: structure[1].websites[2].pages[0],\n                websiteId: structure[1].websites[2]._id,\n                pagesStructure: pagesStructure,\n                publishOne: true,\n            }\n\n            let res = await request(server)\n                .post(`/api/pages/revert`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[0])\n                .send(sampleData)\n            expect(res.status).toBe(404)\n\n            res = await request(server)\n                .post(`/api/pages/revert`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    ...sampleData,\n                    currentPage: structure[1].websites[1].pages[0],\n                })\n            expect(res.status).toBe(400)\n\n            res = await request(server)\n                .post(`/api/pages/revert`)\n                .set('Current-Action', '11')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    ...sampleData,\n                    currentPage: structure[0].websites[1].pages[0],\n                })\n            expect(res.status).toBe(400)\n\n            res = await request(server)\n                .post(`/api/pages/revert`)\n                .set('Current-Action', '12')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    ...sampleData,\n                    websiteId: structure[1].websites[1]._id,\n                })\n            expect(res.status).toBe(404)\n\n            const updatedPagesStructure = [...pagesStructure]\n            updatedPagesStructure[3] = {\n                id: structure[0].websites[1].pages[3],\n                url: 'sdasdasd',\n            }\n            res = await request(server)\n                .post(`/api/pages/revert`)\n                .set('Current-Action', '13')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    ...sampleData,\n                    pagesStructure: updatedPagesStructure,\n                })\n            expect(res.status).toBe(404)\n\n            res = await request(server)\n                .post(`/api/pages/revert`)\n                .set('Current-Action', '14')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    ...sampleData,\n                    publishOne: 'one',\n                })\n            expect(res.status).toBe(400)\n        })\n\n        it('should respond with success true when publishOne is true', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n\n            const structure = await getDBStructure()\n            const website = await Website.findById(structure[1].websites[2]._id)\n            const pagesStructure = pure(website.pagesStructure)\n            pagesStructure[0].title = 'updated'\n            const page = await Page.findById(structure[1].websites[2].pages[0])\n            const page2 = await Page.findById(structure[1].websites[2].pages[2])\n\n            expect(pure(page.content)).not.toEqual(\n                pure(page.publishedVersion.content)\n            )\n            expect(pure(page.content)).toEqual({\n                key_1: 'User_1 Website 2_Page_0_value_1_key_1',\n                key_2: 'User_1 Website 2_Page_0_value_2_key_2',\n            })\n\n            expect(pure(page2.content)).not.toEqual(\n                pure(page2.publishedVersion.content)\n            )\n            expect(pure(page2.content)).toEqual({\n                key_1: 'User_1 Website 2_Page_2_value_1_key_1',\n                key_2: 'User_1 Website 2_Page_2_value_2_key_2',\n            })\n\n            const res = await request(server)\n                .post(`/api/pages/revert`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    currentPageId: structure[1].websites[2].pages[0],\n                    websiteId: structure[1].websites[2]._id,\n                    pagesStructure: pagesStructure,\n                    publishOne: true,\n                })\n            expect(res.status).toBe(200)\n\n            const result = JSON.parse(res.text)\n            const newStructure = await getDBStructure()\n            const newWebsite = await Website.findById(\n                newStructure[1].websites[2]._id\n            )\n            const newPagesStructure = pure(newWebsite.pagesStructure)\n            const newPage = await Page.findById(\n                structure[1].websites[2].pages[0]\n            )\n            const newPage2 = await Page.findById(\n                structure[1].websites[2].pages[2]\n            )\n            const pagesObjects = {\n                [structure[1].websites[2].pages[0]]: newPage,\n            }\n\n            expect(newPagesStructure[0].title).toBe('updated')\n            expect(pure(newPage.content)).toEqual(\n                pure(newPage.publishedVersion.content)\n            )\n            expect(pure(newPage.publishedVersion.content)).toEqual(\n                pure(page.publishedVersion.content)\n            )\n            expect(pure(newPage.content)).toEqual({\n                key_1: 'User_1 Website 2_Page_0_value_1_key_1_old',\n                key_2: 'User_1 Website 2_Page_0_value_2_key_2_old',\n            })\n            expect(pure(newPage2.content)).not.toEqual(\n                pure(newPage2.publishedVersion.content)\n            )\n            expect(pure(newPage2.content)).toEqual(pure(page2.content))\n            expect(pure(newPage2.content)).toEqual({\n                key_1: 'User_1 Website 2_Page_2_value_1_key_1',\n                key_2: 'User_1 Website 2_Page_2_value_2_key_2',\n            })\n            expect(result.pagesObjects).toEqual(pure(pagesObjects))\n        })\n\n        it('should respond with success true when publishOne is true', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n\n            const structure = await getDBStructure()\n            const website = await Website.findById(structure[1].websites[2]._id)\n            const pagesStructure = pure(website.pagesStructure)\n            pagesStructure[0].title = 'updated'\n            const page = await Page.findById(structure[1].websites[2].pages[0])\n            const page2 = await Page.findById(structure[1].websites[2].pages[2])\n\n            expect(pure(page.content)).not.toEqual(\n                pure(page.publishedVersion.content)\n            )\n            expect(pure(page.content)).toEqual({\n                key_1: 'User_1 Website 2_Page_0_value_1_key_1',\n                key_2: 'User_1 Website 2_Page_0_value_2_key_2',\n            })\n\n            expect(pure(page2.content)).not.toEqual(\n                pure(page2.publishedVersion.content)\n            )\n            expect(pure(page2.content)).toEqual({\n                key_1: 'User_1 Website 2_Page_2_value_1_key_1',\n                key_2: 'User_1 Website 2_Page_2_value_2_key_2',\n            })\n\n            const res = await request(server)\n                .post(`/api/pages/revert`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    currentPageId: structure[1].websites[2].pages[0],\n                    websiteId: structure[1].websites[2]._id,\n                    pagesStructure: pagesStructure,\n                    publishOne: false,\n                })\n            expect(res.status).toBe(200)\n\n            const result = JSON.parse(res.text)\n            const newStructure = await getDBStructure()\n            const newWebsite = await Website.findById(\n                newStructure[1].websites[2]._id\n            )\n            const newPagesStructure = pure(newWebsite.pagesStructure)\n            const newPage = await Page.findById(\n                structure[1].websites[2].pages[0]\n            )\n            const newPage2 = await Page.findById(\n                structure[1].websites[2].pages[2]\n            )\n            const pagesObjects = {}\n            await Promise.all(\n                website.pagesStructure.map(async item => {\n                    pagesObjects[item.id] = await Page.findById(item.id)\n                })\n            )\n\n            expect(newPagesStructure[0].title).toBe('updated')\n            expect(pure(newPage.content)).toEqual(\n                pure(newPage.publishedVersion.content)\n            )\n            expect(pure(newPage.publishedVersion.content)).toEqual(\n                pure(page.publishedVersion.content)\n            )\n            expect(pure(newPage.content)).toEqual({\n                key_1: 'User_1 Website 2_Page_0_value_1_key_1_old',\n                key_2: 'User_1 Website 2_Page_0_value_2_key_2_old',\n            })\n            expect(pure(newPage2.content)).toEqual(\n                pure(newPage2.publishedVersion.content)\n            )\n            expect(pure(newPage2.publishedVersion.content)).toEqual(\n                pure(page2.publishedVersion.content)\n            )\n            expect(pure(newPage2.content)).toEqual({\n                key_1: 'User_1 Website 2_Page_2_value_1_key_1_old',\n                key_2: 'User_1 Website 2_Page_2_value_2_key_2_old',\n            })\n            expect(result.pagesObjects).toEqual(pure(pagesObjects))\n        })\n    })\n})\n"],"file":"pages.test.js"}