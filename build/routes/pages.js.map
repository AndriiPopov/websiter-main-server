{"version":3,"sources":["../../src/routes/pages.js"],"names":["router","express","Router","post","auth","action","req","res","body","error","status","send","details","message","websiteId","user","currentPageId","pagesStructure","Website","findByIdAndUpdate","pagesToPublish","publishOne","push","findById","website","concat","map","page","id","Promise","all","pageId","Page","publishedVersion","content","toObject","markModified","save","success","pagesToRevert","pagesObjects","createPage","duplicate","put","params","deletePage","_id","currentPage"],"mappings":"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","sourcesContent":["import express from 'express'\nimport _ from 'lodash'\nimport action from '../middleware/action'\nimport auth from '../middleware/auth'\nimport type { $Request, $Response } from 'express'\n\nconst router = express.Router()\nimport {\n    pageIsInUser,\n    pageIsInWebsite,\n    websiteIsInUser,\n    pagesStructureIsRight,\n} from '../utils/checkDescedant'\nimport { Website } from '../models/website'\nimport {\n    Page,\n    validatePageCreate,\n    validatePageSave,\n    validatePagePublishRevert,\n} from '../models/page'\n\ntype pubReqType = {\n    user: {},\n    body: {\n        websiteId: string,\n        currentPageId: string,\n        pagesStructure: Array<{\n            id: String,\n            url: string,\n        }>,\n        publishOne: boolean,\n    },\n} & $Request\n\n// $FlowFixMe\nrouter.post(\n    '/publish',\n    [auth, action],\n    async (req: pubReqType, res: $Response) => {\n        const { error } = validatePagePublishRevert(req.body)\n        if (error) return res.status(400).send(error.details[0].message)\n\n        if (await websiteIsInUser(req.body.websiteId, req.user, res)) return\n\n        if (\n            await pageIsInWebsite(\n                req.body.currentPageId,\n                req.body.websiteId,\n                res\n            )\n        )\n            return\n\n        if (\n            await pagesStructureIsRight(\n                req.body.pagesStructure,\n                req.body.websiteId,\n                res\n            )\n        )\n            return\n\n        await Website.findByIdAndUpdate(req.body.websiteId, {\n            pagesStructure: req.body.pagesStructure,\n        })\n\n        let pagesToPublish = []\n        if (req.body.publishOne) {\n            pagesToPublish.push(req.body.currentPageId)\n        } else {\n            const website = await Website.findById(req.body.websiteId)\n            if (!website)\n                return res\n                    .status(404)\n                    .send('The website with the given ID was not found.')\n            pagesToPublish = pagesToPublish.concat(\n                website.pagesStructure.map(page => page.id)\n            )\n        }\n        await Promise.all(\n            pagesToPublish.map(async pageId => {\n                const page = await Page.findById(pageId)\n                if (!page)\n                    return res\n                        .status(404)\n                        .send('The page with the given ID was not found.')\n                page.publishedVersion.content = page.toObject().content\n                page.markModified('publishedVersion')\n                await page.save()\n            })\n        )\n\n        res.send({\n            success: true,\n        })\n    }\n)\n\n// $FlowFixMe\nrouter.post(\n    '/revert',\n    [auth, action],\n    async (req: pubReqType, res: $Response) => {\n        const { error } = validatePagePublishRevert(req.body)\n        if (error) return res.status(400).send(error.details[0].message)\n\n        if (await websiteIsInUser(req.body.websiteId, req.user, res)) return\n\n        if (\n            await pageIsInWebsite(\n                req.body.currentPageId,\n                req.body.websiteId,\n                res\n            )\n        )\n            return\n\n        if (\n            await pagesStructureIsRight(\n                req.body.pagesStructure,\n                req.body.websiteId,\n                res\n            )\n        )\n            return\n\n        await Website.findByIdAndUpdate(req.body.websiteId, {\n            pagesStructure: req.body.pagesStructure,\n        })\n\n        let pagesToRevert = []\n        if (req.body.publishOne) {\n            pagesToRevert.push(req.body.currentPageId)\n        } else {\n            const website = await Website.findById(req.body.websiteId)\n            if (!website)\n                return res\n                    .status(404)\n                    .send('The website with the given ID was not found.')\n            pagesToRevert = pagesToRevert.concat(\n                website.pagesStructure.map(page => page.id)\n            )\n        }\n        const pagesObjects = {}\n        await Promise.all(\n            pagesToRevert.map(async pageId => {\n                const page = await Page.findById(pageId)\n                if (!page)\n                    return res\n                        .status(404)\n                        .send('The page with the given ID was not found.')\n                page.content = page.publishedVersion.content\n                page.markModified('publishedVersion')\n                pagesObjects[pageId] = page\n                await page.save()\n            })\n        )\n\n        res.send({\n            pagesObjects,\n        })\n    }\n)\n\ntype postReqType = {\n    user: {},\n    body: {\n        content: {},\n        currentPageId: string,\n        websiteId: string,\n        duplicate: boolean,\n    },\n} & $Request\n\n// $FlowFixMe\nrouter.post('/', [auth, action], async (req: postReqType, res: $Response) => {\n    const { error } = validatePageCreate(req.body)\n    if (error) return res.status(400).send(error.details[0].message)\n    if (await websiteIsInUser(req.body.websiteId, req.user, res)) return\n    if (req.body.currentPageId) {\n        if (\n            await pageIsInWebsite(\n                req.body.currentPageId,\n                req.body.websiteId,\n                res\n            )\n        ) {\n            return\n        }\n    }\n    const website = await Website.findById(req.body.websiteId)\n    const { page, pagesStructure } = await website.createPage(\n        req.body.currentPageId,\n        req.body.duplicate\n    )\n    await website.save()\n    res.send({\n        page,\n        pagesStructure,\n    })\n})\n\ntype putReqType = {\n    user: {},\n    body: {\n        content: {},\n        pagesStructure: Array<{\n            id: String,\n            url: string,\n        }>,\n    },\n} & $Request\n\n// $FlowFixMe\nrouter.put('/:id', [auth, action], async (req: putReqType, res: $Response) => {\n    const { error } = validatePageSave(req.body)\n    if (error) return res.status(400).send(error.details[0].message)\n\n    if (await pageIsInUser(req.params.id, req.user, res)) return\n\n    const page = await Page.findById(req.params.id)\n    if (!page) {\n        return res.status(404).send('The page with the given ID was not found.')\n    }\n\n    if (req.body.pagesStructure) {\n        if (\n            await pagesStructureIsRight(\n                req.body.pagesStructure,\n                page.website,\n                res\n            )\n        )\n            return\n    }\n    page.content = req.body.content\n    await page.save()\n\n    if (req.body.pagesStructure) {\n        await Website.findByIdAndUpdate(page.website, {\n            pagesStructure: req.body.pagesStructure,\n        })\n    }\n    res.send({ status: true })\n})\n\ntype delReqType = {\n    user: {},\n} & $Request\n\n// $FlowFixMe\nrouter.delete(\n    '/:id',\n    [auth, action],\n    async (req: delReqType, res: $Response) => {\n        const page = await Page.findById(req.params.id)\n        if (!page)\n            return res\n                .status(404)\n                .send('The page with the given ID was not found.')\n\n        if (await pageIsInUser(req.params.id, req.user, res)) return\n\n        let website = await Website.findById(page.website)\n        if (!website)\n            return res\n                .status(404)\n                .send('The website with the given ID was not found.')\n\n        await website.deletePage(page._id)\n\n        website = await website.save()\n        res.send({\n            pagesStructure: website.pagesStructure,\n            currentPage: website.currentPage,\n        })\n    }\n)\n\nexport default router\n"],"file":"pages.js"}