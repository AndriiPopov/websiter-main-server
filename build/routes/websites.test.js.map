{"version":3,"sources":["../../src/routes/websites.test.js"],"names":["server","describe","beforeEach","serverObj","afterEach","close","Page","remove","Website","User","it","headersAreGood","expect","toBeTruthy","users","websites","pages","currentWebsite","currentPage","tokens","oldStructure","post","set","res","result","JSON","parse","text","structure","findById","_id","user","Promise","all","map","id","website","_","pick","pagesObjects","pagesStructure","item","toEqual","toObject","length","toBe","title","put","send","status","not","url","oldUser","oldWebsite","oldPagesStructure","oldWebsites","urlNotOk","get","newResult","newStructure","newUser","toBeNull"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport serverObj from '../index'\nimport request from 'supertest'\nimport { User } from '../models/user'\nimport { Website } from '../models/website'\nimport { Page } from '../models/page'\nimport {\n    getDBStructure,\n    populateTestDB,\n    pure,\n} from '../utils/testPopulateDBandReadStructure'\nimport { testTokenAndCurrentAction } from '../utils/testTokenAndCurrentAction.test'\n\nlet server\n\ndescribe('/api/websites', () => {\n    beforeEach(() => {\n        server = serverObj\n    })\n\n    afterEach(async () => {\n        server.close()\n        await Page.remove({})\n        await Website.remove({})\n        await User.remove({})\n    })\n\n    describe('POST /', () => {\n        it('should respond error 400/401/412 if no token in headers, wrong token, no current action or wrong currentaction', async () => {\n            const headersAreGood = await testTokenAndCurrentAction(\n                server,\n                'post',\n                'websites'\n            )\n            expect(headersAreGood).toBeTruthy()\n        })\n\n        it('should respond with website, websites, and pagesObjects', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n\n            const oldStructure = await getDBStructure()\n\n            const res = await request(server)\n                .post('/api/websites')\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n\n            const result = JSON.parse(res.text)\n            const structure = await getDBStructure()\n            const user = await User.findById(structure[1]._id)\n            const websites = await Promise.all(\n                user.websites.map(async id => {\n                    const website = await Website.findById(id)\n                    return _.pick(website, ['_id', 'domain', 'title'])\n                })\n            )\n            const website = await Website.findById(user.currentWebsite)\n            const pagesObjects = {}\n            await Promise.all(\n                website.pagesStructure.map(async item => {\n                    pagesObjects[item.id] = await Page.findById(item.id)\n                })\n            )\n\n            expect(result.websites).toEqual(pure(websites))\n            expect(result.website).toEqual(pure(website.toObject()))\n            expect(result.pagesObjects).toEqual(pure(pagesObjects))\n            expect(result.websites.length).toBe(5)\n            expect(result.website.title).toBe('New website')\n            expect(result.website.pagesStructure.length).toBe(1)\n        })\n    })\n\n    describe('PUT /:id /', () => {\n        it('should respond error 400/401/412 if no token in headers, wrong token, no current action or wrong currentaction', async () => {\n            const headersAreGood = await testTokenAndCurrentAction(\n                server,\n                'put',\n                'websites/1'\n            )\n            expect(headersAreGood).toBeTruthy()\n        })\n\n        it('should respond error 401/400 if wrong data, or wrong user', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n\n            const structure = await getDBStructure()\n\n            let res = await request(server)\n                .put(`/api/websites/${structure[1].websites[2]._id}`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    title: 1,\n                })\n            expect(res.status).toBe(400)\n\n            res = await request(server)\n                .put(`/api/websites/dskfdjslkwelkj`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[0])\n                .send({\n                    title: 1,\n                })\n            expect(res.status).toBe(404)\n\n            res = await request(server)\n                .put(`/api/websites/${structure[1].websites[2]._id}`)\n                .set('Current-Action', '11')\n                .set('X-Auth-Token', tokens[0])\n                .send({\n                    title: 'Updated',\n                })\n            expect(res.status).toBe(404)\n            const website = await Website.findById(structure[1].websites[2]._id)\n            expect(website.title).not.toBe('Updated')\n\n            const pagesStructure = pure(website.pagesStructure)\n            res = await request(server)\n                .put(`/api/websites/${structure[1].websites[2]._id}`)\n                .set('Current-Action', '11')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    pagesStructure: [\n                        ...pagesStructure,\n                        {\n                            url: 'askjsaas',\n                            id: structure[0].websites[2].pages[0],\n                        },\n                    ],\n                })\n            expect(res.status).toBe(404)\n        })\n\n        it('should update the website and respond with website and websites', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 2,\n                currentPage: 0,\n            })\n            const oldStructure = await getDBStructure()\n            const oldUser = await User.findById(oldStructure[1]._id)\n            const oldWebsite = await Website.findById(oldUser.currentWebsite)\n            const oldPagesStructure = pure(oldWebsite.pagesStructure)\n            oldPagesStructure[0].url = 'updated'\n            oldPagesStructure[1].url = 'updated2'\n\n            let res = await request(server)\n                .put(`/api/websites/${oldStructure[1].websites[2]._id}`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n                .set('Content-Type', 'application/json')\n                .send({\n                    title: 'Updated',\n                    pagesStructure: oldPagesStructure,\n                })\n            expect(res.status).toBe(200)\n\n            const result = JSON.parse(res.text)\n            const structure = await getDBStructure()\n            const user = await User.findById(structure[1]._id)\n            const websites = await Promise.all(\n                user.websites.map(async id => {\n                    const website = await Website.findById(id)\n                    return _.pick(website, ['_id', 'domain', 'title'])\n                })\n            )\n            const website = await Website.findById(user.currentWebsite)\n\n            expect(result.websites).toEqual(pure(websites))\n            expect(result.website).toEqual(pure(website.toObject()))\n            expect(website.title).toBe('Updated')\n            expect(website.pagesStructure[0].url).toBe('updated')\n            expect(website.pagesStructure[1].url).toBe('updated2')\n        })\n\n        it('should respond with urlNotGood true if url is taken', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 2,\n                currentPage: 0,\n            })\n            const oldStructure = await getDBStructure()\n            const oldUser = await User.findById(oldStructure[1]._id)\n            const oldWebsites = await Promise.all(\n                oldUser.websites.map(async id => {\n                    const website = await Website.findById(id)\n                    return _.pick(website, ['_id', 'domain', 'title'])\n                })\n            )\n            const oldWebsite = await Website.findById(oldUser.currentWebsite)\n            const oldPagesStructure = pure(oldWebsite.pagesStructure)\n            oldPagesStructure[0].url = oldPagesStructure[1].url\n\n            let res = await request(server)\n                .put(`/api/websites/${oldStructure[1].websites[2]._id}`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n                .set('Content-Type', 'application/json')\n                .send({\n                    title: 'Updated',\n                    pagesStructure: oldPagesStructure,\n                })\n            expect(res.status).toBe(200)\n\n            const result = JSON.parse(res.text)\n            const structure = await getDBStructure()\n            const user = await User.findById(structure[1]._id)\n            const websites = await Promise.all(\n                user.websites.map(async id => {\n                    const website = await Website.findById(id)\n                    return _.pick(website, ['_id', 'domain', 'title'])\n                })\n            )\n            const website = await Website.findById(user.currentWebsite)\n\n            expect(pure(oldWebsites)).toEqual(pure(websites))\n            expect(pure(website)).toEqual(pure(website.toObject()))\n            expect(result.urlNotOk).toBeTruthy()\n        })\n\n        it('should respond with urlNotGood true if url is in wron gformat', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 2,\n                currentPage: 0,\n            })\n            const oldStructure = await getDBStructure()\n            const oldUser = await User.findById(oldStructure[1]._id)\n            const oldWebsites = await Promise.all(\n                oldUser.websites.map(async id => {\n                    const website = await Website.findById(id)\n                    return _.pick(website, ['_id', 'domain', 'title'])\n                })\n            )\n            const oldWebsite = await Website.findById(oldUser.currentWebsite)\n            const oldPagesStructure = pure(oldWebsite.pagesStructure)\n            oldPagesStructure[0].url = 'askdjaslj aldjalk'\n\n            let res = await request(server)\n                .put(`/api/websites/${oldStructure[1].websites[2]._id}`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n                .set('Content-Type', 'application/json')\n                .send({\n                    title: 'Updated',\n                    pagesStructure: oldPagesStructure,\n                })\n            expect(res.status).toBe(200)\n\n            const result = JSON.parse(res.text)\n            const structure = await getDBStructure()\n            const user = await User.findById(structure[1]._id)\n            const websites = await Promise.all(\n                user.websites.map(async id => {\n                    const website = await Website.findById(id)\n                    return _.pick(website, ['_id', 'domain', 'title'])\n                })\n            )\n            const website = await Website.findById(user.currentWebsite)\n\n            expect(pure(oldWebsites)).toEqual(pure(websites))\n            expect(pure(website)).toEqual(pure(website.toObject()))\n            expect(result.urlNotOk).toBeTruthy()\n        })\n    })\n\n    describe('PUT /currentpage/:id /', () => {\n        it('should respond error 400/401/412 if no token in headers, wrong token, no current action or wrong currentaction', async () => {\n            const headersAreGood = await testTokenAndCurrentAction(\n                server,\n                'put',\n                'websites/currentpage/1'\n            )\n            expect(headersAreGood).toBeTruthy()\n        })\n        it('should respond error 401 if  wrong data, or wrong user', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n\n            const structure = await getDBStructure()\n\n            let res = await request(server)\n                .put(\n                    `/api/websites/currentpage/${structure[1].websites[2]._id}`\n                )\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n                .send({\n                    title: 1,\n                })\n            expect(res.status).toBe(400)\n\n            res = await request(server)\n                .put(`/api/websites/currentpage/dskfdjslkwelkj`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[0])\n                .send({\n                    title: 1,\n                })\n            expect(res.status).toBe(404)\n\n            res = await request(server)\n                .put(\n                    `/api/websites/currentpage/${structure[1].websites[2]._id}`\n                )\n                .set('Current-Action', '11')\n                .set('X-Auth-Token', tokens[0])\n                .send({\n                    title: 'Updated',\n                })\n            expect(res.status).toBe(404)\n            const website = await Website.findById(structure[1].websites[2]._id)\n            expect(website.title).not.toBe('Updated')\n        })\n\n        it('should update the website and respond with status true', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 2,\n                currentPage: 0,\n            })\n            const oldStructure = await getDBStructure()\n            const oldUser = await User.findById(oldStructure[1]._id)\n            const oldWebsite = await Website.findById(oldUser.currentWebsite)\n\n            let res = await request(server)\n                .put(\n                    `/api/websites/currentpage/${\n                        oldStructure[1].websites[2]._id\n                    }`\n                )\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n                .set('Content-Type', 'application/json')\n                .send({\n                    currentPage: oldStructure[1].websites[2].pages[2],\n                    title: 'Updated',\n                })\n            expect(res.status).toBe(200)\n\n            const result = JSON.parse(res.text)\n            const structure = await getDBStructure()\n            const user = await User.findById(structure[1]._id)\n            const website = await Website.findById(user.currentWebsite)\n\n            expect(result.status).toBeTruthy()\n            expect(oldWebsite.title).toEqual(website.title)\n            expect(website.title).not.toBe('Updated')\n            expect(pure(oldWebsite.currentPage)).not.toEqual(\n                pure(website.currentPage)\n            )\n            expect(pure(website.currentPage)).toEqual(\n                pure(oldStructure[1].websites[2].pages[2])\n            )\n        })\n    })\n\n    describe('GET /:id /', () => {\n        it('should respond error 400/401/412 if no token in headers, wrong token, no current action or wrong currentaction', async () => {\n            const headersAreGood = await testTokenAndCurrentAction(\n                server,\n                'get',\n                'websites/1'\n            )\n            expect(headersAreGood).toBeTruthy()\n        })\n        it('should respond error 401/400 if wrong data, or wrong user', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n\n            const structure = await getDBStructure()\n\n            let res = await request(server)\n                .get(`/api/websites/${structure[1].websites[2]._id}`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[0])\n            expect(res.status).toBe(404)\n        })\n\n        it('should website and pagesObjects', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 2,\n                currentPage: 0,\n            })\n\n            const structure = await getDBStructure()\n            const user = await User.findById(structure[1]._id)\n            const website = await Website.findById(structure[1].websites[2]._id)\n            const pagesObjects = {}\n            await Promise.all(\n                website.pagesStructure.map(async item => {\n                    pagesObjects[item.id] = await Page.findById(item.id)\n                })\n            )\n\n            let res = await request(server)\n                .get(`/api/websites/${structure[1].websites[2]._id}`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n                .set('Content-Type', 'application/json')\n            expect(res.status).toBe(200)\n\n            const result = JSON.parse(res.text)\n\n            expect(result.website).toEqual(pure(website.toObject()))\n            expect(result.pagesObjects).toEqual(pure(pagesObjects))\n        })\n    })\n\n    describe('DELETE /', () => {\n        it('should respond error 400/401/412 if no token in headers, wrong token, no current action or wrong currentaction', async () => {\n            const headersAreGood = await testTokenAndCurrentAction(\n                server,\n                'delete',\n                'websites/1'\n            )\n            expect(headersAreGood).toBeTruthy()\n        })\n\n        it('should respond error 401/400 wrong data, or wrong user', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 3,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n\n            const structure = await getDBStructure()\n\n            let res = await request(server)\n                .delete(`/api/websites/dskfdjslkwelkj`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[0])\n            expect(res.status).toBe(404)\n\n            res = await request(server)\n                .delete(`/api/websites/${structure[1].websites[2]._id}`)\n                .set('Current-Action', '11')\n                .set('X-Auth-Token', tokens[0])\n            expect(res.status).toBe(404)\n        })\n\n        it('should delete website and send website, websites and pagesObjects -- delete two websites one by one', async () => {\n            const tokens = await populateTestDB({\n                users: 2,\n                websites: 1,\n                pages: 15,\n                currentWebsite: 0,\n                currentPage: 0,\n            })\n            const oldStructure = await getDBStructure()\n            let res = await request(server)\n                .delete(`/api/websites/${oldStructure[1].websites[0]._id}`)\n                .set('Current-Action', '10')\n                .set('X-Auth-Token', tokens[1])\n            expect(res.status).toBe(200)\n\n            const result = JSON.parse(res.text)\n            const structure = await getDBStructure()\n            const user = await User.findById(structure[1]._id)\n            const website = await Website.findById(user.currentWebsite)\n            const pagesObjects = {}\n            await Promise.all(\n                website.pagesStructure.map(async item => {\n                    pagesObjects[item.id] = await Page.findById(item.id)\n                })\n            )\n            const websites = await Promise.all(\n                user.websites.map(async id => {\n                    const website = await Website.findById(id)\n                    return _.pick(website, ['_id', 'domain', 'title'])\n                })\n            )\n\n            expect(oldStructure[1].websites.length).toBe(2)\n            expect(structure[1].websites.length).toBe(1)\n            expect(result.websites).toEqual(pure(websites))\n            expect(result.website).toEqual(pure(website))\n            expect(result.pagesObjects).toEqual(pure(pagesObjects))\n\n            res = await request(server)\n                .delete(`/api/websites/${user.currentWebsite}`)\n                .set('Current-Action', '11')\n                .set('X-Auth-Token', tokens[1])\n            expect(res.status).toBe(200)\n\n            const newResult = JSON.parse(res.text)\n            const newStructure = await getDBStructure()\n            const newUser = await User.findById(structure[1]._id)\n\n            expect(newStructure[1].websites.length).toBe(0)\n            expect(newResult.websites).toEqual([])\n            expect(newResult.website).toBeNull()\n            expect(newResult.pagesObjects).toEqual({})\n        })\n    })\n})\n"],"file":"websites.test.js"}