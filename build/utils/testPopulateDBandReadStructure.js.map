{"version":3,"sources":["../../src/utils/testPopulateDBandReadStructure.js"],"names":["populateTestDB","settings","tokens","userCount","users","user","User","email","password","currentAction","bcrypt","genSalt","salt","hash","websiteCount","websites","website","Website","title","header","content","footer","domain","bufferElements","element_1","element_2","path","pageCount","pages","publishedVersion","key_1","key_2","page","Page","save","pagesStructure","push","id","_id","name","url","isHidden","description","isHomePage","isNotPublished","parseInt","pop","length","currentPage","currentWebsite","generateAuthToken","getDBStructure","find","Promise","all","map","findById","websiteObject","pure","a","JSON","parse","stringify"],"mappings":"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","sourcesContent":["import bcrypt from 'bcryptjs'\nimport { User } from '../models/user'\nimport { Website } from '../models/website'\nimport { Page } from '../models/page'\n\nexport const populateTestDB = async (settings: {\n    users: number,\n    websites: number,\n    pages: number,\n    currentWebsite: number,\n    currentPage: number,\n}) => {\n    const tokens = []\n    for (let userCount = 0; userCount <= settings.users; userCount++) {\n        let user = new User({\n            email: `myemail_${userCount}@domain${userCount}.com`,\n            password: `12345_${userCount}`,\n            currentAction: 10,\n        })\n        let salt = await bcrypt.genSalt(10)\n        user.password = await bcrypt.hash(user.password, salt)\n        if (userCount !== settings.users) {\n            for (\n                let websiteCount = 0;\n                websiteCount <= settings.websites;\n                websiteCount++\n            ) {\n                let website = new Website({\n                    title: `User_${userCount} Website ${websiteCount}`,\n                    header: {\n                        content: `User_${userCount} Website ${websiteCount}_header`,\n                    },\n                    footer: {\n                        content: `User_${userCount} Website ${websiteCount}_footer`,\n                    },\n                    domain: `User_${userCount} Website ${websiteCount}_domain`,\n                    bufferElements: [\n                        {\n                            element_1: `User_${userCount} Website ${websiteCount}_bufferElement_1`,\n                        },\n                        {\n                            element_2: `User_${userCount} Website ${websiteCount}_bufferElement_2`,\n                        },\n                    ],\n                })\n\n                if (websiteCount !== settings.websites) {\n                    let path = []\n                    for (\n                        let pageCount = 0;\n                        pageCount < settings.pages;\n                        pageCount++\n                    ) {\n                        let publishedVersion = {}\n                        if (pageCount % 2 == 1) {\n                            publishedVersion = {\n                                content: {\n                                    key_1: `User_${userCount} Website ${websiteCount}_Page_${pageCount}_value_1_key_1`,\n                                    key_2: `User_${userCount} Website ${websiteCount}_Page_${pageCount}_value_2_key_2`,\n                                },\n                            }\n                        } else {\n                            publishedVersion = {\n                                content: {\n                                    key_1: `User_${userCount} Website ${websiteCount}_Page_${pageCount}_value_1_key_1_old`,\n                                    key_2: `User_${userCount} Website ${websiteCount}_Page_${pageCount}_value_2_key_2_old`,\n                                },\n                            }\n                        }\n                        let page = new Page({\n                            website: website,\n                            content: {\n                                key_1: `User_${userCount} Website ${websiteCount}_Page_${pageCount}_value_1_key_1`,\n                                key_2: `User_${userCount} Website ${websiteCount}_Page_${pageCount}_value_2_key_2`,\n                            },\n                            publishedVersion: publishedVersion,\n                        })\n                        await page.save()\n\n                        website.pagesStructure.push({\n                            id: page._id,\n                            path: path,\n                            name: `User_${userCount} Website ${websiteCount}_Page_${pageCount}_name`,\n                            url: `User_${userCount}_Website_${websiteCount}_Page_${pageCount}_url`,\n                            isHidden: false,\n                            title: `User_${userCount} Website ${websiteCount}_Page_${pageCount}_title`,\n                            description: `User_${userCount}_Website ${websiteCount}_Page_${pageCount}_description`,\n                            isHomePage: pageCount === 0 ? true : false,\n                            isNotPublished: pageCount % 2 == 1 ? false : true,\n                            isHidden: false,\n                        })\n                        website = await website.save()\n                        switch (parseInt(pageCount)) {\n                            case 0:\n                                path.push(page._id)\n                                break\n                            case 1:\n                                path.push(page._id)\n                                break\n                            case 2:\n                                path.push(page._id)\n                                break\n                            case 5:\n                                path.pop()\n                                break\n                            case 6:\n                                path.push(page._id)\n                                break\n                            case 8:\n                                path.pop()\n                                break\n                            case 10:\n                                path.length = 0\n                                break\n                        }\n                        if (\n                            settings.currentPage ||\n                            settings.currentPage === 0\n                        ) {\n                            if (settings.currentPage === parseInt(pageCount)) {\n                                website.currentPage = page\n                            }\n                        } else {\n                            website.currentPage = page\n                        }\n                    }\n                }\n                website = await website.save()\n                user.websites.push(website._id)\n                if (settings.currentWebsite || settings.currentWebsite === 0) {\n                    if (settings.currentWebsite === parseInt(websiteCount)) {\n                        user.currentWebsite = website\n                    }\n                } else {\n                    user.currentWebsite = website\n                }\n            }\n        }\n        await user.save()\n        tokens.push(user.generateAuthToken())\n    }\n    return tokens\n}\n\nexport const getDBStructure = async () => {\n    let users = await User.find({})\n    users = await Promise.all(\n        users.map(async user => {\n            let websites = user.websites\n            websites = await Promise.all(\n                websites.map(async website => {\n                    const websiteObject = await Website.findById(website)\n                    const pagesStructure = websiteObject.pagesStructure\n                    const pages = pagesStructure.map(page => page.id)\n                    return { _id: website, pages }\n                })\n            )\n            return { _id: user._id, websites }\n        })\n    )\n    return users\n}\n\nexport const pure = (a: Object) => JSON.parse(JSON.stringify(a))\n"],"file":"testPopulateDBandReadStructure.js"}