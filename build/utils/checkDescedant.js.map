{"version":3,"sources":["../../src/utils/checkDescedant.js"],"names":["pageIsInWebsite","pageId","websiteId","res","Website","findById","website","status","send","pagesStructure","some","page","id","toString","pageIsInUser","user","Page","websites","websiteIsInUser","pagesStructureIsRight","oldPagesStructure","item"],"mappings":"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","sourcesContent":["import { User } from '../models/user'\nimport { Website } from '../models/website'\nimport { Page } from '../models/page'\nimport { pure } from './testPopulateDBandReadStructure'\nimport type { $Response as resType } from 'express'\n\nexport const pageIsInWebsite = async (\n    pageId: string,\n    websiteId: string,\n    res: resType\n) => {\n    const website = await Website.findById(websiteId)\n    if (!website) {\n        return res\n            .status(404)\n            .send('The website with the given ID was not found.')\n    } else {\n        if (\n            !website.pagesStructure.some(page => page.id.toString() === pageId)\n        ) {\n            return res\n                .status(404)\n                .send('The page with the given ID was not found.')\n        }\n    }\n}\n\nexport const pageIsInUser = async (\n    pageId: string,\n    user: Object,\n    res: resType\n) => {\n    const page = await Page.findById(pageId)\n    if (\n        !user.websites.some(\n            website => website.toString() === page.website.toString()\n        )\n    ) {\n        return res.status(404).send('The page with the given ID was not found.')\n    }\n}\n\nexport const websiteIsInUser = async (\n    websiteId: string,\n    user: Object,\n    res: resType\n) => {\n    if (!user.websites.some(website => website.toString() === websiteId)) {\n        return res\n            .status(404)\n            .send('The website with the given ID was not found.')\n    }\n}\n\nexport const pagesStructureIsRight = async (\n    pagesStructure: Array<Object>,\n    websiteId: string,\n    res: resType\n) => {\n    const website = await Website.findById(websiteId)\n\n    const oldPagesStructure = pure(website.pagesStructure)\n    if (\n        pagesStructure.some(\n            page =>\n                !oldPagesStructure.some(\n                    item => item.id.toString() === page.id.toString()\n                )\n        )\n    ) {\n        return res.status(404).send('The pages in the pageStructure are wrong.')\n    }\n}\n"],"file":"checkDescedant.js"}