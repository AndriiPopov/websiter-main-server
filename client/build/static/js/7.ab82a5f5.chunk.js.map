{"version":3,"sources":["containers/WebsiteSettings/WebsiteSettings.js"],"names":["WebsiteSettings","state","controls","title","label","type","placeholder","value","_this","props","validation","required","minLength","valid","touched","domain","inputChangedHandler","event","controlName","updatedControls","Object","_home_ndjs_websiter_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","_home_ndjs_websiter_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","saveHandler","saveWebsiteSettings","_id","deleteHandler","history","push","deleteWebsite","rules","isValid","trim","length","maxLength","isEmail","RegExp","test","isNumeric","_this2","this","formElementsArray","key","id","config","form","map","formElement","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","_components_UI_LoginInput_LoginInput__WEBPACK_IMPORTED_MODULE_11__","changed","invalid","shouldValidate","_hoc_Aux__WEBPACK_IMPORTED_MODULE_13__","_components_UI_LoginButton_LoginButton__WEBPACK_IMPORTED_MODULE_12__","clicked","btnType","Component","connect","website","dispatch","actions","withRouter"],"mappings":"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","file":"static/js/7.ab82a5f5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n// import PropTypes from 'prop-types';\n\n// import * as classes from './WebsiteSettings.css.js';\nimport * as actions from '../../store/actions/index';\nimport LoginInput from '../../components/UI/LoginInput/LoginInput';\nimport LoginButton from '../../components/UI/LoginButton/LoginButton';\nimport Aux from '../../hoc/Aux';\n\ntype Props = {\n    title: string,\n    domain: string,\n    _id: string,\n    history: Array<any>,\n    saveWebsiteSettings: (_id: string, title?: string, domain?: string) => {},\n    deleteWebsite: (_id: string) => {}\n}\n\ntype State = {\n    controls: {\n        title: {\n            label: 'Name',\n            type: 'text',\n            placeholder: 'Website name',\n            value?: string,\n            validation: {\n                required: true,\n                minLength: 1\n            },\n            valid: boolean,\n            touched: boolean\n        },\n        domain: {\n            label: 'Domain',\n            type: 'text',\n            placeholder: 'Domain',\n            value: string,\n            validation: {\n                required: true,\n                minLength: 5\n            },\n            valid: boolean,\n            touched: boolean\n        }\n    }\n}\n\nclass WebsiteSettings extends Component<Props, State> {\n    state = {\n        controls: {\n            title: {\n                label: 'Name',\n                type: 'text',\n                placeholder: 'Website name',\n                value: this.props.title || '',\n                validation: {\n                    required: true,\n                    minLength: 1\n                },\n                valid: false,\n                touched: false\n            },\n            domain: {\n                label: 'Domain',\n                type: 'text',\n                placeholder: 'Domain',\n                value: this.props.domain || '',\n                validation: {\n                    required: true,\n                    minLength: 5\n                },\n                valid: false,\n                touched: false\n            }\n        }\n    };\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = new RegExp('/^(([^<>()\\\\[\\\\]\\\\.,;:\\\\s@\"]+(\\\\.[^<>()\\\\[\\\\]\\\\.,;:\\\\s@\"]+)*)|(\".+\"))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}])|(([a-zA-Z\\\\-0-9]+\\\\.)+[a-zA-Z]{2,}))$/');\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n        return isValid;\n    };\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            }\n        };\n        this.setState({controls: updatedControls});\n    };\n\n    saveHandler = () => {\n        let title, domain;\n        if (this.state.controls.title.valid) {\n            title = this.state.controls.title.value;\n        }\n        if (this.state.controls.domain.valid) {\n            domain = this.state.controls.domain.value;\n        }\n        this.props.saveWebsiteSettings(this.props._id, title, domain)\n    }\n\n    deleteHandler = () => {\n        this.props.history.push('/dashboard');\n        this.props.deleteWebsite(this.props._id);\n    }\n\n    render () {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        };\n        let form = formElementsArray.map(formElement => (\n            <LoginInput \n                key={formElement.id}\n                type={formElement.config.type}\n                placeholder={formElement.config.placeholder}\n                value={formElement.config.value}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                label={formElement.config.label} />\n        ));\n        return (\n            <Aux>\n                {form}\n                <LoginButton \n                    clicked={this.saveHandler}\n                    btnType=\"Success\">\n                    SAVE\n                </LoginButton>\n                <LoginButton \n                    clicked={this.deleteHandler}\n                    btnType=\"Danger\">\n                    DELETE\n                </LoginButton>\n            </Aux>\n        );\n    }\n};\n\nWebsiteSettings.propTypes = {\n};\n\nconst mapStateToProps = state => {\n    return {\n        title: state.website.title,\n        domain: state.website.domain,\n        _id: state.website._id\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        saveWebsiteSettings: (_id, title, domain) => dispatch(actions.saveWebsiteSettings(_id, title, domain)),\n        deleteWebsite: _id => dispatch(actions.deleteWebsite(_id)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(WebsiteSettings));"],"sourceRoot":""}