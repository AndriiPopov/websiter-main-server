{"version":3,"sources":["containers/WebsiteSettings/WebsiteSettings.js"],"names":["WebsiteSettings","state","controls","title","label","type","placeholder","value","_this","props","validation","required","minLength","valid","touched","domain","inputChangedHandler","event","controlName","updatedControls","Object","_home_ndjs_websiter_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","_home_ndjs_websiter_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","saveHandler","saveWebsiteSettings","_id","rules","isValid","trim","length","maxLength","isEmail","RegExp","test","isNumeric","_this2","this","formElementsArray","key","push","id","config","form","map","formElement","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","_components_UI_LoginInput_LoginInput__WEBPACK_IMPORTED_MODULE_10__","changed","invalid","shouldValidate","_hoc_Aux__WEBPACK_IMPORTED_MODULE_12__","_components_UI_LoginButton_LoginButton__WEBPACK_IMPORTED_MODULE_11__","clicked","btnType","deleteWebsite","Component","connect","website","dispatch","actions"],"mappings":"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","file":"static/js/3.d22c45a7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n// import PropTypes from 'prop-types';\n\n// import * as classes from './WebsiteSettings.css.js';\nimport * as actions from '../../store/actions/index';\nimport LoginInput from '../../components/UI/LoginInput/LoginInput';\nimport LoginButton from '../../components/UI/LoginButton/LoginButton';\nimport Aux from '../../hoc/Aux';\n\nclass WebsiteSettings extends Component {\n    state = {\n        controls: {\n            title: {\n                label: 'Name',\n                type: 'text',\n                placeholder: 'Website name',\n                value: this.props.title || '',\n                validation: {\n                    required: true,\n                    minLength: 1\n                },\n                valid: false,\n                touched: false\n            },\n            domain: {\n                label: 'Domain',\n                type: 'text',\n                placeholder: 'Domain',\n                value: this.props.domain || '',\n                validation: {\n                    required: true,\n                    minLength: 5\n                },\n                valid: false,\n                touched: false\n            }\n        }\n    };\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = new RegExp('/^(([^<>()\\\\[\\\\]\\\\.,;:\\\\s@\"]+(\\\\.[^<>()\\\\[\\\\]\\\\.,;:\\\\s@\"]+)*)|(\".+\"))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}])|(([a-zA-Z\\\\-0-9]+\\\\.)+[a-zA-Z]{2,}))$/');\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    };\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            }\n        };\n        this.setState({controls: updatedControls});\n    };\n\n    saveHandler = () => {\n        let title, domain;\n        if (this.state.controls.title.valid) {\n            title = this.state.controls.title.value;\n        }\n        if (this.state.controls.domain.valid) {\n            domain = this.state.controls.domain.value;\n        }\n        this.props.saveWebsiteSettings(this.props._id, title, domain)\n    }\n\n    render () {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        };\n        let form = formElementsArray.map(formElement => (\n            <LoginInput \n                key={formElement.id}\n                type={formElement.config.type}\n                placeholder={formElement.config.placeholder}\n                value={formElement.config.value}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                label={formElement.config.label} />\n        ));\n        return (\n            <Aux>\n                {form}\n                <LoginButton \n                    clicked={this.saveHandler}\n                    btnType=\"Success\">\n                    SAVE\n                </LoginButton>\n                <LoginButton \n                    clicked={() => this.props.deleteWebsite(this.props._id)}\n                    btnType=\"Danger\">\n                    DELETE\n                </LoginButton>\n            </Aux>\n        );\n    }\n};\n\nWebsiteSettings.propTypes = {\n};\n\nconst mapStateToProps = state => {\n    return {\n        title: state.website.title,\n        domain: state.website.domain,\n        _id: state.website._id\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        saveWebsiteSettings: (_id, title, domain) => dispatch(actions.saveWebsiteSettings(_id, title, domain)),\n        deleteWebsite: _id => dispatch(actions.deleteWebsite(_id)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WebsiteSettings);"],"sourceRoot":""}